name: vrabber-telegram-client

services:
  telegram-client:
    build:
      context: ../../.
      dockerfile: deploy/prod/app/Dockerfile
    env_file: ".env"
    networks:
      - vrabber
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    build:
      context: ../../.
      dockerfile: deploy/prod/postgres/Dockerfile
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - vrabber
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}" ]
      interval: 5s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  pgadmin:
    build:
      context: ../../.
      dockerfile: deploy/prod/pgadmin/Dockerfile
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - ${PGADMIN_LOCAL_PORT}:80
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - vrabber
    healthcheck:
      test: [ "CMD", "wget", "-O", "-", "http://localhost:80/misc/ping" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  liquibase:
    build:
      context: ../../.
      dockerfile: deploy/prod/liquibase/Dockerfile
    environment:
      LIQUIBASE_COMMAND_USERNAME: ${DB_USER}
      LIQUIBASE_COMMAND_PASSWORD: ${DB_PASS}
      LIQUIBASE_COMMAND_URL: jdbc:postgresql://postgres:5432/${DB_NAME}
      LIQUIBASE_COMMAND_CHANGELOG_FILE: changelog.sql
    volumes:
      - ../../migrations/changelog.sql:/liquibase/changelog.sql
    networks:
      - vrabber
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy

networks:
  vrabber:
    external: true

volumes:
  postgres-data:
  pgadmin-data:
